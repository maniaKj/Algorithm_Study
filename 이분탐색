//Basic Form, 지속적으로 max, min값을 바꿔가면서 수행
#include <string>
#include <vector>
#include <queue>
#include <iostream>
using namespace std;

int solution(int n, vector<int> times) {
	long long max = 0, min = 1;
	for (auto i : times) {
		if (i > max) max = i;
	}
    max *= n;
    
	while (min <= max) {
		long long mid = (max + min) / 2;
		long long total = 0;
		for (auto i : times) {
			total += (mid / i);
		}
		cout << "result : " << max << " " << min << ", " << mid<<" -> " << total << endl;
		if (total >= n) {
			max = mid - 1;
		}
		else if (total < n) {
            min = mid + 1;
        }
	}

	return min;
}

//기본형은 코드가 굉장히 예민해서
//정답이랑 1, 2 차이로 틀리는 경우가 많음!
//민감한 부분 처리 : 문제 출처 해커 랭크 https://www.hackerrank.com/challenges/minimum-time-required/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=search&h_r=next-challenge&h_v=zen
long minTime(vector<long> machines, long goal) {
    long long min, mid, max;

    sort(machines.begin(), machines.end());
    mid = 1;
    max = 9999999999999; //최댓값 지정할 때 나중에 결과값 계산하는 부분에서 오버플로우 없도록 해둘 것.
    while (min <= max) {
        mid = (min + max) / 2;
        long long tmp = 0;

        for (auto i : machines) tmp += mid / i;

        cout << min << " : " << mid << " : " << max << " : T : " << tmp << endl;

        if (tmp < goal) {
            min = mid + 1;
        }
        else if (tmp > goal) {
            max = mid - 1;
        }
        else if (tmp == goal) { //문제의 부분, mid 주변값에 대해 결과값을 계산한 뒤 결과가 애매하다 싶은 부분은 min, max를 1씩 이동
            long long c1 = 0, c2 = 0;
            for (auto i : machines) {
                c1 += (mid - 1) / i;
                c2 += (mid + 1) / i;
            }
            if (c1 < tmp) return mid;
            else if (c2 < tmp) { //mid + 1에 대한 결과값이 목표값보다 작으면 min, max 각각 + 1씩
                min++;
                max++;
            }
            else if (c1 == tmp) max = mid - 1;
        }

    }
  //문제의 부분. 말단 처리 칼같이 할 것. 정답이랑 1, 2 차이날 수 있음.
    long long c1 = 0, c2 = 0, tt = 0;
    for (auto i : machines) {
        c1 += (mid - 1) / i;
        tt += mid / i;
        c2 += (mid + 1) / i;
    }

    if (c1 > goal) return mid - 1;
    if (tt >= goal) return mid;
    else return mid + 1;
}
